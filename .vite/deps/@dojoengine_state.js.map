{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/@dojoengine+state@0.6.125_starknet@6.8.0_typescript@5.4.5_zod@3.23.8/node_modules/@dojoengine/state/src/recs/index.ts", "../../node_modules/.pnpm/@dojoengine+state@0.6.125_starknet@6.8.0_typescript@5.4.5_zod@3.23.8/node_modules/@dojoengine/state/src/utils/index.ts"],
  "sourcesContent": ["import {\n    Component,\n    ComponentValue,\n    Entity,\n    Metadata,\n    Schema,\n    setComponent,\n} from \"@dojoengine/recs\";\nimport { Client } from \"@dojoengine/torii-client\";\nimport { convertValues } from \"../utils\";\n\nexport const getSyncEntities = async <S extends Schema>(\n    client: Client,\n    components: Component<S, Metadata, undefined>[],\n    limit: number = 100\n) => {\n    await getEntities(client, components, limit);\n    syncEntities(client, components);\n};\n\nexport const getEntities = async <S extends Schema>(\n    client: Client,\n    components: Component<S, Metadata, undefined>[],\n    limit: number = 100\n) => {\n    let cursor = 0;\n    let continueFetching = true;\n\n    while (continueFetching) {\n        const entities = await client.getEntities(limit, cursor);\n\n        setEntities(entities, components);\n\n        if (Object.keys(entities).length < limit) {\n            continueFetching = false;\n        } else {\n            cursor += limit;\n        }\n    }\n};\n\nexport const syncEntities = async <S extends Schema>(\n    client: Client,\n    components: Component<S, Metadata, undefined>[]\n) => {\n    client.onEntityUpdated([], (entities: any) => {\n        setEntities(entities, components);\n    });\n};\n\nexport const setEntities = async <S extends Schema>(\n    entities: any[],\n    components: Component<S, Metadata, undefined>[]\n) => {\n    for (let key in entities) {\n        if (entities.hasOwnProperty(key)) {\n            for (let componentName in entities[key]) {\n                if (entities[key].hasOwnProperty(componentName)) {\n                    let recsComponent = components[componentName as any];\n\n                    if (recsComponent) {\n                        setComponent(\n                            recsComponent,\n                            key as Entity,\n                            convertValues(\n                                recsComponent.schema,\n                                entities[key][componentName]\n                            ) as ComponentValue\n                        );\n                    }\n                }\n            }\n        }\n    }\n};\n", "import { Type as RecsType, Schema } from \"@dojoengine/recs\";\n\nexport function convertValues(schema: Schema, values: any) {\n    return Object.keys(schema).reduce<any>((acc, key) => {\n        const schemaType = schema[key];\n        const value = values[key];\n\n        if (value === null || value === undefined) {\n            acc[key] = value;\n            return acc;\n        }\n\n        // Check if the schemaType is a string, if so, assign the value directly\n        if (schemaType === RecsType.String) {\n            acc[key] = value;\n        } else if (\n            typeof schemaType === \"object\" &&\n            value &&\n            typeof value === \"object\"\n        ) {\n            acc[key] = convertValues(schemaType, value);\n        } else {\n            // Convert to BigInt or Number based on schemaType\n            acc[key] =\n                schemaType === RecsType.BigInt ? BigInt(value) : Number(value);\n        }\n\n        return acc;\n    }, {});\n}\n"],
  "mappings": ";;;;;;;;;ACEO,SAASA,EAAcC,GAAgBC,GAAa;AACvD,SAAO,OAAO,KAAKD,CAAM,EAAE,OAAY,CAACE,GAAKC,MAAQ;AACjD,QAAMC,IAAaJ,EAAOG,CAAG,GACvBE,IAAQJ,EAAOE,CAAG;AAExB,WAAIE,KAAU,QACVH,EAAIC,CAAG,IAAIE,GACJH,MAIPE,MAAeE,EAAS,SACxBJ,EAAIC,CAAG,IAAIE,IAEX,OAAOD,KAAe,YACtBC,KACA,OAAOA,KAAU,WAEjBH,EAAIC,CAAG,IAAIJ,EAAcK,GAAYC,CAAK,IAG1CH,EAAIC,CAAG,IACHC,MAAeE,EAAS,SAAS,OAAOD,CAAK,IAAI,OAAOA,CAAK,GAG9DH;EACX,GAAG,CAAC,CAAC;AACT;ADlBO,IAAMK,IAAkB,OAC3BC,GACAC,GACAC,IAAgB,QACf;AACD,QAAMC,EAAYH,GAAQC,GAAYC,CAAK,GAC3CE,EAAaJ,GAAQC,CAAU;AACnC;AAPO,IASME,IAAc,OACvBH,GACAC,GACAC,IAAgB,QACf;AACD,MAAIG,IAAS,GACTC,IAAmB;AAEvB,SAAOA,KAAkB;AACrB,QAAMC,IAAW,MAAMP,EAAO,YAAYE,GAAOG,CAAM;AAEvDG,MAAYD,GAAUN,CAAU,GAE5B,OAAO,KAAKM,CAAQ,EAAE,SAASL,IAC/BI,IAAmB,QAEnBD,KAAUH;EAElB;AACJ;AA5BO,IA8BME,IAAe,OACxBJ,GACAC,MACC;AACDD,IAAO,gBAAgB,CAAC,GAAIO,OAAkB;AAC1CC,MAAYD,GAAUN,CAAU;EACpC,CAAC;AACL;AArCO,IAuCMO,IAAc,OACvBD,GACAN,MACC;AACD,WAASN,KAAOY;AACZ,QAAIA,EAAS,eAAeZ,CAAG,GAAA;AAC3B,eAASc,KAAiBF,EAASZ,CAAG;AAClC,YAAIY,EAASZ,CAAG,EAAE,eAAec,CAAa,GAAG;AAC7C,cAAIC,IAAgBT,EAAWQ,CAAoB;AAE/CC,eACAC,EACID,GACAf,GACAJ,EACImB,EAAc,QACdH,EAASZ,CAAG,EAAEc,CAAa,CAC/B,CACJ;QAER;IAAA;AAIhB;",
  "names": ["convertValues", "schema", "values", "acc", "key", "schemaType", "value", "RecsType", "getSyncEntities", "client", "components", "limit", "getEntities", "syncEntities", "cursor", "continueFetching", "entities", "setEntities", "componentName", "recsComponent", "setComponent"]
}
