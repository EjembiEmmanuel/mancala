{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/@dojoengine+core@0.6.125_starknet@6.8.0_typescript@5.4.5_zod@3.23.8/node_modules/@dojoengine/core/src/provider/DojoProvider.ts", "../../node_modules/.pnpm/@dojoengine+core@0.6.125_starknet@6.8.0_typescript@5.4.5_zod@3.23.8/node_modules/@dojoengine/core/src/provider/provider.ts", "../../node_modules/.pnpm/@dojoengine+core@0.6.125_starknet@6.8.0_typescript@5.4.5_zod@3.23.8/node_modules/@dojoengine/core/src/logger/logger.ts", "../../node_modules/.pnpm/@dojoengine+core@0.6.125_starknet@6.8.0_typescript@5.4.5_zod@3.23.8/node_modules/@dojoengine/core/src/types/index.ts", "../../node_modules/.pnpm/@dojoengine+core@0.6.125_starknet@6.8.0_typescript@5.4.5_zod@3.23.8/node_modules/@dojoengine/core/src/constants/index.ts", "../../node_modules/.pnpm/@dojoengine+core@0.6.125_starknet@6.8.0_typescript@5.4.5_zod@3.23.8/node_modules/@dojoengine/core/src/utils/index.ts", "../../node_modules/.pnpm/@dojoengine+core@0.6.125_starknet@6.8.0_typescript@5.4.5_zod@3.23.8/node_modules/@dojoengine/core/src/config/index.ts"],
  "sourcesContent": ["import {\n    RpcProvider,\n    Account,\n    InvokeFunctionResponse,\n    Contract,\n    shortString,\n    InvocationsDetails,\n    AllowArray,\n    Call,\n    num,\n    Result,\n    CallContractResponse,\n    AccountInterface,\n} from \"starknet\";\nimport { Provider } from \"./provider\";\nimport { ConsoleLogger, LogLevel } from \"../logger/logger\";\nimport { WorldEntryPoints } from \"../types\";\nimport { LOCAL_KATANA } from \"../constants\";\nimport { getContractByName } from \"../utils\";\n\n/**\n * DojoProvider: The DojoProvider is an execution provider for dojo worlds. It allows you to easily interact with a dojo world via the Starknet.js library.\n * ```ts\n * import { DojoProvider } from \"@dojoengine/core\";\n *\n * const provider = new DojoProvider(\n *      manifest\n * );\n *\n * await provider.execute(signer, contract, system, call_data);\n * ```\n */\nexport class DojoProvider extends Provider {\n    public provider: RpcProvider;\n    public contract: Contract;\n    public manifest: any;\n    public logger: ConsoleLogger;\n\n    /**\n     * Constructor: Initializes the DojoProvider with the given world address, manifest and URL.\n     *\n     * @param {string} world_address - Address of the world.\n     * @param {string} [url=LOCAL_KATANA] - RPC URL (defaults to LOCAL_KATANA).\n     */\n    constructor(\n        manifest?: any,\n        url: string = LOCAL_KATANA,\n        logLevel: LogLevel = \"none\"\n    ) {\n        super(manifest.world.address);\n        this.provider = new RpcProvider({\n            nodeUrl: url,\n        });\n\n        this.contract = new Contract(\n            manifest.world.abi,\n            this.getWorldAddress(),\n            this.provider\n        );\n        this.manifest = manifest;\n        this.logger = new ConsoleLogger({ level: logLevel });\n    }\n\n    /**\n     * Retrieves a single entity's details.\n     *\n     * @param {string} model - The component to query.\n     * @param {Array<string>} keys - The keys to query.\n     * @param {number} [offset=0] - Starting offset (defaults to 0).\n     * @param {number} [length=0] - Length to retrieve (defaults to 0).\n     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entity's details.\n     */\n    public async entity(\n        model: string,\n        keys: Array<string>,\n        offset: number = 0,\n        length: number = 0,\n        layout: Array<number>\n    ): Promise<Array<bigint>> {\n        try {\n            return (await this.contract.call(WorldEntryPoints.get, [\n                shortString.encodeShortString(model),\n                keys.length,\n                ...(keys as any),\n                offset,\n                length,\n                layout.length,\n                layout,\n            ])) as unknown as Array<bigint>;\n        } catch (error) {\n            this.logger.error(\"Error occured: \", error);\n            throw error;\n        }\n    }\n\n    /**\n     * Retrieves multiple entities' details.\n     *\n     * @param {string} model - The component to query.\n     * @param {number} index - The index to query.\n     * @param {Array<string>} values - The values to query.\n     * @param {number} valuesLength - The values length to query.\n     * @param {Array<number>} valuesLayout - The values layout to query.\n     */\n    public async entities(\n        model: string,\n        index: string,\n        values: Array<string>,\n        valuesLength: number,\n        valuesLayout: Array<number>\n    ): Promise<Array<Array<bigint>>> {\n        try {\n            return (await this.contract.call(WorldEntryPoints.entities, [\n                shortString.encodeShortString(model),\n                index,\n                values,\n                valuesLength,\n                valuesLayout,\n            ])) as unknown as Promise<Array<Array<bigint>>>;\n        } catch (error) {\n            this.logger.error(\"Error occured: \", error);\n            throw error;\n        }\n    }\n\n    /**\n     * Retrieves a models\n     *\n     * @param {string} name - Name of the model.\n     * @returns {Promise<bigint>} - A promise that resolves to a bigint representing the model's details.\n     */\n    public async model(name: string): Promise<bigint> {\n        try {\n            return (await this.contract.call(WorldEntryPoints.model, [\n                shortString.encodeShortString(name),\n            ])) as unknown as bigint;\n        } catch (error) {\n            this.logger.error(\"Error occured: \", error);\n            throw error;\n        }\n    }\n\n    /**\n     * Executes a function with the given parameters.\n     * This function is a wrapper around the Starknet.js Account.execute function, but is more convenient to use.\n     *\n     * ```ts\n     * await provider.execute(signer, contract, system, call_data);\n     * ```\n     * @param {Account} account - The account to use.\n     * @param {string} contract - The contract to execute.\n     * @param {string} call - The function to call.\n     * @param {num.BigNumberish[]} call_data - The call data for the function.\n     * @param {InvocationsDetails | undefined} transactionDetails - The transactionDetails allow to override maxFee & version\n     * @returns {Promise<InvokeFunctionResponse>} - A promise that resolves to the response of the function execution.\n     */\n    public async execute(\n        account: Account | AccountInterface,\n        contract_name: string,\n        call: string,\n        calldata: num.BigNumberish[],\n        transactionDetails?: InvocationsDetails | undefined\n    ): Promise<InvokeFunctionResponse> {\n        try {\n            const nonce = await account?.getNonce();\n\n            return await account?.execute(\n                [\n                    {\n                        contractAddress: getContractByName(\n                            this.manifest,\n                            contract_name\n                        )?.address,\n                        entrypoint: call,\n                        calldata: calldata,\n                    },\n                ],\n                undefined,\n                {\n                    maxFee: 0, // TODO: Update this value as needed.\n                    ...transactionDetails,\n                    nonce,\n                }\n            );\n        } catch (error) {\n            this.logger.error(\"Error occured: \", error);\n            throw error;\n        }\n    }\n\n    /**\n     * Executes a multicall.\n     * This function is a wrapper around the Starknet.js Account.execute function, but allows for executing multiple calls at once.\n     *\n     * ```ts\n     * await provider.executeMulti(account, calls);\n     * ```\n     * @param {Account} account - The account to use.\n     * @param {AllowArray<Call>} calls - The calls to execute.\n     * @param {InvocationsDetails | undefined} transactionDetails - The transactionDetails allow to override maxFee & version\n     * @returns {Promise<InvokeFunctionResponse>} - A promise that resolves to the response of the function execution.\n     */\n    public async executeMulti(\n        account: Account | AccountInterface,\n        calls: AllowArray<Call>,\n        transactionDetails?: InvocationsDetails | undefined\n    ): Promise<InvokeFunctionResponse> {\n        try {\n            const nonce = await account?.getNonce();\n\n            return await account?.execute(calls, undefined, {\n                maxFee: 0, // TODO: Update this value as needed.\n                ...transactionDetails,\n                nonce,\n            });\n        } catch (error) {\n            this.logger.error(\"Error occured: \", error);\n            throw error;\n        }\n    }\n\n    /**\n     * Retrieves current uuid from the world contract.\n     *\n     * @returns {Promise<number>} - A promise that resolves to the world uuid\n     * @throws {Error} - Throws an error if the call fails.\n     *\n     * @example\n     * const uuid = await provider.uuid();\n     * console.log(uuid);\n     * // => 6\n     *\n     */\n    public async uuid(): Promise<number> {\n        try {\n            const result = await this.provider.callContract({\n                contractAddress: this.getWorldAddress(),\n                entrypoint: WorldEntryPoints.uuid,\n                calldata: [],\n            });\n            if (result && result.length === 1) {\n                return parseInt(result[0]);\n            }\n            throw new Error(\"Contract did not return expected uuid\");\n        } catch (error) {\n            this.logger.error(`Failed to fetch uuid: ${error}`);\n            throw new Error(`Failed to fetch uuid: ${error}`);\n        }\n    }\n    /**\n     * Calls a function with the given parameters.\n     *\n     * @param {string} contract_name - The contract to call.\n     * @param {string} call - The function to call.\n     * @returns {Promise<CallContractResponse>} - A promise that resolves to the response of the function call.\n     */\n    public async call(\n        contract_name: string,\n        call: string,\n        calldata?: num.BigNumberish[]\n    ): Promise<CallContractResponse> {\n        try {\n            return await this.provider.callContract({\n                contractAddress: getContractByName(this.manifest, contract_name)\n                    ?.address,\n                entrypoint: call,\n                calldata,\n            });\n        } catch (error) {\n            this.logger.error(`Failed to call: ${error}`);\n            throw new Error(`Failed to call: ${error}`);\n        }\n    }\n    /**\n     * Calls a function with the given parameters and return parsed results.\n     *\n     * @param {string} contract_name - The contract to call.\n     * @param {string} call - The function to call.\n     * @returns {Promise<Result>} - A promise that resolves to the response of the function call.\n     */\n    public async callContract(\n        contract_name: string,\n        call: string,\n        calldata?: num.BigNumberish[]\n    ): Promise<Result> {\n        try {\n            const contractInfos = getContractByName(\n                this.manifest,\n                contract_name\n            );\n            const contract = new Contract(\n                contractInfos.abi,\n                contractInfos.address,\n                this.provider\n            );\n            return await contract.call(call, calldata);\n        } catch (error) {\n            this.logger.error(`Failed to callContract: ${error}`);\n            throw new Error(`Failed to callContract: ${error}`);\n        }\n    }\n}\n", "import { IWorld } from \"../types\";\n\n/**\n * Provider class: An abstract base class for all providers.\n * It implements the ICommands interface, ensuring that any class deriving from Provider\n * will have implementations for the entity and entities methods.\n */\nexport abstract class Provider implements IWorld {\n    // Store the address of the world.\n    private readonly worldAddress: string;\n\n    /**\n     * Constructor: Initializes the Provider with a given world address.\n     *\n     * @param {string} worldAddress - The address of the world.\n     */\n    constructor(worldAddress: string) {\n        this.worldAddress = worldAddress;\n    }\n\n    /**\n     * Abstract method to retrieve a single entity's details.\n     * Classes extending Provider should provide a concrete implementation for this method.\n     *\n     * @param {string} component - The component to query.\n     * @param {Query} query - The query details.\n     * @param {number} offset - Starting offset.\n     * @param {number} length - Length to retrieve.\n     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entity's details.\n     */\n    public abstract entity(\n        model: string,\n        keys: Array<string>,\n        offset: number,\n        length: number,\n        layout: Array<number>\n    ): Promise<Array<bigint>>;\n\n    /**\n     * Abstract method to retrieve multiple entities' details.\n     * Classes extending Provider should provide a concrete implementation for this method.\n     *\n     * @param {string} component - The component to query.\n     * @param {number} length - Number of entities to retrieve.\n     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entities' details.\n     */\n    public abstract entities(\n        model: string,\n        index: string | null,\n        values: Array<string>,\n        valuesLength: number,\n        valuesLayout: Array<number>\n    ): Promise<Array<Array<bigint>>>;\n\n    /**\n     * Retrieves the stored world address.\n     *\n     * @returns {string} - The address of the world.\n     */\n    public getWorldAddress(): string {\n        return this.worldAddress;\n    }\n}\n", "/** Signature of a logging function */\nexport interface LogFn {\n    (message?: any, ...optionalParams: any[]): void;\n}\n\n/** Basic logger interface */\nexport interface Logger {\n    info: LogFn;\n    warn: LogFn;\n    error: LogFn;\n}\n\n/** Log levels */\nexport type LogLevel = \"info\" | \"warn\" | \"error\" | \"none\";\n\n/* tslint:disable:no-unused-variable */\nconst NO_OP: LogFn = (_message?: any, ..._optionalParams: any[]) => {};\n\n/** Logger which outputs to the browser console */\nexport class ConsoleLogger implements Logger {\n    readonly info: LogFn;\n    readonly warn: LogFn;\n    readonly error: LogFn;\n\n    constructor(options?: { level?: LogLevel }) {\n        const { level } = options || {};\n\n        this.error = console.error.bind(console);\n\n        if (level === \"none\") {\n            this.error = NO_OP;\n            this.warn = NO_OP;\n            this.info = NO_OP;\n        }\n\n        if (level === \"error\") {\n            this.warn = NO_OP;\n            this.info = NO_OP;\n\n            return;\n        }\n\n        this.warn = console.warn.bind(console);\n\n        if (level === \"warn\") {\n            this.info = NO_OP;\n\n            return;\n        }\n\n        this.info = console.log.bind(console);\n    }\n}\n", "/**\n * Enumeration representing various entry points or functions available in the World.\n */\nexport enum WorldEntryPoints {\n    get = \"entity\", // Retrieve a single entity\n    set = \"set_entity\", // Set or update a single entity\n    entities = \"entities\", // Retrieve multiple entities\n    execute = \"execute\", // Execute a specific command\n    registerSystem = \"register_system\", // Register a new system\n    registerComponent = \"register_model\", // Register a new component\n    model = \"model\", // Access a component\n    system = \"system\", // Access a system\n    metadataUri = \"metadata_uri\", // Retrieve metadata URI for a resource\n    setMetadataUri = \"set_metadata_uri\", // Set metadata URI for a resource\n    registerModel = \"register_model\", // Register a new model\n    deployContract = \"deploy_contract\", // Deploy a contract and return its address\n    upgradeContract = \"upgrade_contract\", // Upgrade a contract\n    uuid = \"uuid\", // Retrieve the UUID of the world\n    emit = \"emit\", // Emit an event\n    entityIds = \"entity_ids\", // Retrieve entity IDs for a model\n    setExecutor = \"set_executor\", // Set executor for the world\n    executor = \"executor\", // Retrieve the executor's address\n    base = \"base\", // Retrieve base class hash\n    deleteEntity = \"delete_entity\", // Delete an entity\n    isOwner = \"is_owner\", // Check if an address is an owner of a resource\n    grantOwner = \"grant_owner\", // Grant ownership of a resource\n    revokeOwner = \"revoke_owner\", // Revoke ownership of a resource\n    isWriter = \"is_writer\", // Check if a system is a writer for a model\n    grantWriter = \"grant_writer\", // Grant writer permission\n    revokeWriter = \"revoke_writer\", // Revoke writer permission\n}\n\n/**\n * World interface: An interface that defines the methods that a world must implement.\n * Dojo v0.4.0\n */\n\nexport interface IWorld {\n    // Retrieve metadata URI for a resource\n    metadataUri?(resource: string): Promise<Array<string>>;\n\n    // Set metadata URI for a resource\n    setMetadataUri?(resource: string, uri: Array<string>): Promise<void>;\n\n    // Retrieve model class hash by name\n    model?(name: string): Promise<string>;\n\n    // Register a new model\n    registerModel?(classHash: string): Promise<void>;\n\n    // Deploy a contract and return its address\n    deployContract?(salt: string, classHash: string): Promise<string>;\n\n    // Upgrade a contract and return its new class hash\n    upgradeContract?(address: string, classHash: string): Promise<string>;\n\n    // Retrieve the UUID of the world\n    uuid?(): Promise<string>;\n\n    // Retrieve entity details\n    entity?(\n        model: string,\n        keys: Array<string>,\n        offset: number,\n        length: number,\n        layout: Array<number>\n    ): Promise<Array<bigint>>;\n\n    // Set entity details\n    setEntity?(\n        model: string,\n        keys: Array<string>,\n        offset: number,\n        values: Array<string>,\n        layout: Array<number>\n    ): Promise<void>;\n\n    // Retrieve multiple entities' details\n    entities?(\n        model: string,\n        index: string | null,\n        values: Array<string>,\n        valuesLength: number,\n        valuesLayout: Array<number>\n    ): Promise<Array<Array<bigint>>>;\n\n    // Retrieve entity IDs for a model\n    entityIds?(model: string): Promise<Array<string>>;\n\n    // Set executor for the world\n    setExecutor?(contractAddress: string): Promise<void>;\n\n    // Retrieve the executor's address\n    executor?(): Promise<string>;\n\n    // Retrieve base class hash\n    base?(): Promise<string>;\n\n    // Delete an entity\n    deleteEntity?(\n        model: string,\n        keys: Array<string>,\n        layout: Array<number>\n    ): Promise<void>;\n\n    // Check if an address is an owner of a resource\n    isOwner?(address: string, resource: string): Promise<boolean>;\n\n    // Grant ownership of a resource to an address\n    grantOwner?(address: string, resource: string): Promise<void>;\n\n    // Revoke ownership of a resource from an address\n    revokeOwner?(address: string, resource: string): Promise<void>;\n\n    // Check if a system is a writer for a model\n    isWriter?(model: string, system: string): Promise<boolean>;\n\n    // Grant writer permission to a system for a model\n    grantWriter?(model: string, system: string): Promise<void>;\n\n    // Revoke writer permission from a system for a model\n    revokeWriter?(model: string, system: string): Promise<void>;\n\n    // Get the age or duration since the World was created\n    worldAge?(): Promise<bigint>;\n}\n", "export const LOCAL_KATANA = \"http://localhost:5050\";\nexport const LOCAL_RELAY = \"\";\nexport const LOCAL_TORII = \"http://localhost:8080\";\nexport const KATANA_PREFUNDED_ADDRESS =\n    \"0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03\";\nexport const KATANA_PREFUNDED_PRIVATE_KEY =\n    \"0x1800000000300000180000000000030000000000003006001800006600\";\nexport const KATANA_CLASS_HASH =\n    \"0x05400e90f7e0ae78bd02c77cd75527280470e2fe19c54970dd79dc37a9d3645c\";\nexport const KATANA_ETH_CONTRACT_ADDRESS =\n    \"0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\";\n", "import { TypedData } from \"starknet\";\n\n/**\n * Gets a contract from a manifest by name.\n *\n * @param {any} manifest - The manifest object.\n * @param {string} name - The name of the contract.\n * @returns {any} The contract object.\n *\n */\nexport const getContractByName = (manifest: any, name: string) => {\n    return manifest.contracts.find((contract: any) => {\n        const nameParts = contract.name.split(\"::\");\n        // Check if the last part matches or if the full name matches\n        return (\n            nameParts[nameParts.length - 1] === name || contract.name === name\n        );\n    });\n};\n\n/**\n * Parses a model name into a class name.\n *\n * @param {any} model - The model object.\n * @returns {string} The class name.\n *\n */\nexport const parseModelName = (model: any) => {\n    // Define a set of known acronyms\n    const acronyms = new Set([\"ERC\"]);\n\n    return model.name\n        .split(\"::\")\n        .pop()\n        .split(\"_\")\n        .map((part: string) => {\n            // If the part is a known acronym, keep it in uppercase\n            if (acronyms.has(part.toUpperCase())) {\n                return part.toUpperCase();\n            }\n            // If the part is fully numeric, keep it as is\n            if (!isNaN(parseInt(part))) {\n                return part;\n            }\n            // Capitalize the first letter and make the rest lowercase\n            return part.charAt(0).toUpperCase() + part.slice(1).toLowerCase();\n        })\n        .join(\"\");\n};\n\n/**\n * Creates a model typed data object.\n *\n * @param {any} model - The model object.\n * @returns {any} The model typed data object.\n *\n */\nexport const createModelTypedData = (name: string, model: any): TypedData => {\n    const typesFromSchema = (\n        name: string,\n        schema: any,\n        types: { [typeName: string]: { name: string; type: string }[] }\n    ) => {\n        Object.entries(schema).forEach(([key, value]) => {\n            let typeName = value?.constructor.name;\n            switch (typeName) {\n                case \"Object\":\n                    typesFromSchema(key, value, types);\n                    break;\n                case \"BigInt\":\n                    types[name].push({ name: key, type: \"felt\" });\n                    break;\n                case \"String\":\n                    types[name].push({ name: key, type: \"shortstring\" });\n                    break;\n                case \"Number\":\n                    types[name].push({ name: key, type: \"u128\" });\n                    break;\n                case \"Boolean\":\n                    types[name].push({ name: key, type: \"bool\" });\n                    break;\n                default:\n                    throw new Error(`Unsupported type: ${typeName}`);\n            }\n        });\n        return types;\n    };\n\n    return {\n        types: typesFromSchema(\"Model\", model, {\n            StarknetDomain: [\n                { name: \"name\", type: \"shortstring\" },\n                { name: \"version\", type: \"shortstring\" },\n                { name: \"chainId\", type: \"shortstring\" },\n                { name: \"revision\", type: \"shortstring\" },\n            ],\n            OffchainMessage: [\n                { name: \"model\", type: \"shortstring\" },\n                { name: name, type: \"Model\" },\n            ],\n            Model: [],\n        }),\n        primaryType: \"OffchainMessage\",\n        domain: {\n            name: \"Dojo\",\n            version: \"1\",\n            chainId: \"1\",\n            revision: \"1\",\n        },\n        message: {\n            model: name,\n            [name]: Object.fromEntries(\n                Object.entries(model).map(([k, v]) => {\n                    if (typeof v == \"bigint\") {\n                        return [k, \"0x\" + v.toString(16)];\n                    }\n\n                    return [k, v];\n                })\n            ),\n        },\n    };\n};\n", "import {\n    KATANA_CLASS_HASH,\n    KATANA_PREFUNDED_ADDRESS,\n    KATANA_PREFUNDED_PRIVATE_KEY,\n    LOCAL_KATANA,\n    LOCAL_RELAY,\n    LOCAL_TORII,\n    KATANA_ETH_CONTRACT_ADDRESS,\n} from \"../constants\";\n\nexport type DojoConfig = ReturnType<typeof createDojoConfig>;\n\ninterface DojoConfigParams {\n    rpcUrl?: string;\n    toriiUrl?: string;\n    relayUrl?: string;\n    masterAddress?: string;\n    masterPrivateKey?: string;\n    accountClassHash?: string;\n    feeTokenAddress?: string;\n    manifest: any;\n}\n\n/**\n * Create Dojo Config: Creates a Dojo Config object. If no parameters are passed, it will use the default values of the current Dojo version.\n */\nexport function createDojoConfig({ manifest, ...config }: DojoConfigParams) {\n    return {\n        rpcUrl: config.rpcUrl ?? LOCAL_KATANA,\n        toriiUrl: config.toriiUrl ?? LOCAL_TORII,\n        relayUrl: config.relayUrl ?? LOCAL_RELAY,\n        masterAddress: config.masterAddress ?? KATANA_PREFUNDED_ADDRESS,\n        masterPrivateKey:\n            config.masterPrivateKey ?? KATANA_PREFUNDED_PRIVATE_KEY,\n        accountClassHash: config.accountClassHash ?? KATANA_CLASS_HASH,\n        feeTokenAddress: config.feeTokenAddress ?? KATANA_ETH_CONTRACT_ADDRESS,\n        manifest,\n    };\n}\n"],
  "mappings": "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",
  "names": ["WorldEntryPoints", "name"]
}
